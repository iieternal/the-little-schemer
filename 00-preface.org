* Preface
  
  <2015-09-02 Wed 19:12>
# Designing a program requires a thorough understanding of data; a good
# program reflects the shape of the data it deals with. Most collections
# of data, and hence most programs, are recursive.

# Recursion is the act of defining an object or solving a problem in
# terms of itself.

Not too sure if I agree there or if it's my lack of understanding. But
I think the definition could be modified as:

Recursion is the act of defining an object or solving a problem in
terms of (a smaller or modified version) of the original problem. I
think I will be able to support this claim or revise it (probably to
reach the original above) over time.

** The goal
   
The goal of this book is to teach the reader to think recursively.

** The three choices for vehicles.

*** Natural Language

# There are three obvious choices: a natural language, such as English;
# formal mathematics; or a programming language. Natural languages are
# ambiguous, imprecise, and sometimes awkwardly verbose. These are all
# virtues for general communication, but something of a drawback for
# communicating concisely as precise a concept as recursion.

*** Mathematics

# The language of mathematics is the opposite of natural language: it
# can express powerful formal ideas with only a few
# symbols. Unfortunately, the language of mathematics is often cryptic
# and barely accessible without special training.

*** Programming Languages

# The marriage of technology and mathematics presents us with a
# third, almost ideal choice: a programming language. e believe that
# programming languages are the best way to convey the concept of
# recursion. They share with mathematics the ability to give a formal
# meaning to a set of symbols. But unlike mathematics, programming
# languages can be directly experienced-you can take the programs in
# this book, observe their behavior, modify them, and experience the
# effect of these modifications.

In this sense, I think programs can be thought of as manifest
mathematics which can lead to experience Math through other senses
than just by seeing symbols and unravelling them in your head.

# It is our belief that writing programs recursively in Scheme is
# essentially simple pattern recognition.

The Little Schemer and The Seasoned Schemer will not introduce you to
the practical world of programming, but a mastery of the concepts in
these books provides a start toward understanding the nature of
computation.

# We know how frustrating the subject matter can be, and a little
# distraction will help you keep your sanity.

Can I extrapolate this to mean that a little distraction is always a
good thing? This is leading me to the slippery slope of formal
definition of having to reason up from first principles what
distraction is. This is a task not suited to my current pursuit. Filed
under revise later for now.
